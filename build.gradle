plugins {
    id 'java-library'
    id 'org.bytedeco.gradle-javacpp-build' version "1.5.7"
    id 'maven-publish'
}

ext {
    // TODO: find a way not to hardcode those paths here.
    win10_SDK = "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.22621.0"
    win10_SDK_libs = "C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.22621.0"
    msvcc = "C:\\Program Files\\Microsoft Visual Studio\\2022\\Community\\VC\\Tools\\MSVC\\14.33.31629"
}

if (project.hasProperty("topobyte")) {
    apply from: 'file:///' + System.getProperty("user.home") \
        + '/.gradle/topobyte.gradle'
}

repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    api 'org.bytedeco:javacpp:1.5.7'
    api 'org.slf4j:slf4j-api:2.0.6'
    testImplementation 'ch.qos.logback:logback-classic:1.4.5'
}

java {
    withSourcesJar()
}

def pomInfo = new XmlSlurper().parse(file('info.pom'));

// Define this manually, otherwise the javacpp build plugin will ship a jar file that includes .obj, .exp and .lib
// files and duplicates the dll file at de/mobanisto/wintoast/windows-x86_64/
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'de.mobanisto'
            artifactId = 'toast4j'
            version = '0.2.0'
            from components.java
            pom {
                name = "$pomInfo.name"
                description = "$pomInfo.description"
                url = "$pomInfo.url"
                licenses {
                    license {
                        name = "$pomInfo.licenseName"
                        url = "$pomInfo.licenseUrl"
                        distribution = "$pomInfo.licenseDistribution"
                    }
                }
            }
        }
    }
}

tasks.withType(org.bytedeco.gradle.javacpp.BuildTask) {
    // set here default values for all build tasks below, typically just includePath and linkPath,
    // but also properties to set the path to the NDK and its compiler in the case of Android
    includePath = [
            win10_SDK + "\\um",
            win10_SDK + "\\shared",
            win10_SDK + "\\ucrt",
            win10_SDK + "\\winrt",
            win10_SDK + "\\cppwinrt",
            msvcc + "\\include",
            "$projectDir\\WinToast",
    ]
    linkPath = [
            win10_SDK_libs + "\\um\\x64",
            win10_SDK_libs + "\\ucrt\\x64",
            msvcc + "\\lib\\x64",
    ]
    compilerOptions = [
            "/std:c++17"
    ]
}

javacppBuildCommand {
    // typically set here the buildCommand to the script that fills up includePath and linkPath
}

javacppBuildParser {
    // typically set here the classOrPackageNames to class names implementing InfoMap
    classOrPackageNames = ["de.mobanisto.wintoast.presets.WinToastLib"]
    outputDirectory = file("$buildDir/javacpp/parser")
}

javacppBuildCompiler {
    // typically set here boolean flags like copyLibs

    // Specify output directory here because otherwise the task will put the .obj, .exp and .lib files alongside
    // the .dll file in build/classes/.../ which are not needed in the end.
    outputDirectory = file("$buildDir/javacpp/compiler")
    // To still have the .dll file on the classpath we then need to copy it to the build dir.
    doLast {
        copy {
            from outputDirectory
            into "$buildDir/resources/main/$javacppPlatform"
            include "*.dll"
        }
    }
}
